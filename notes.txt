
Substrate projects

- Liberland 
    - Our focus is Identity/eResidency/Citizenship - MVP in 8 weeks - Filip, Dorian, Michal
    - GI- check_account_identity function that would use the core Substrate Identity struct (additional fields) (Abel)
    - add Abel to the LL weekly call (Tuesdays at 11 AM EST)

- Bitcoin Treasury Pallet
    - GI- Ensure that BDK is compatible with Substrate (Max)
    - GI- author spec and proposal (Max)
    - GI- POC using testnet and bdk-cli 

- Afloat
    - Current crisis on private Ethereum --
    - GI- Spec'ing for Substrate 
    - GI- Calculated constraint on parent/child NFT relationships - e.g. if parent == 50, sum(children)+parent == 50 (Abel)

    - Define the correct way to access the parent's attributes? :
        // Let's start with some static attributes check (does parent_id exist?) (new_instance.parent_id = parent.get("value") )
        // pallet_uniques::Pallet::<T>::attribute(&class_id, &instance_id,&"static_parent_id".encode() )
        // Options:
        // 1.- Constant &str array containing the keys
        // 2.- Set a whole single attribute as bytes, containing all the fruniques metadata if(inherit_attrs) ( parent_id, numerical_value, etc..)
        // 3.- Keep our own metadata (or whole nfts) storage. Rmrk repo example:
                #[pallet::storage]
                #[pallet::getter(fn get_nfts_by_owner)]
                /// Stores collections info
                pub type NftsByOwner<T: Config> =
                StorageMap<_, Twox64Concat, T::AccountId, Vec<(CollectionId, NftId)>>; 
        // 3.1.- Consider the 3 above but with interfaces/traits
        // I'm assuming doing it via scripts on the front-end isn't viable option 
        
- Cannabis - fruniques
    - spawn/parent/child connections - run test (Max)
    - inheritance of attributes - review (Max)
        - allow inheritance by reference and/or by value 
    - evaluate RMRK substrate code vs Uniques pallet (Abel)

- LeaseX 

- Node Operations
    - GI- Reactivate Kusama Hancock validator for 1KV program (n4 - VM on GCloud) (Max)
    - Configure Kusama Hashed validator for 1KV program (n4 - VM on GCloud)
    - Catalog all potential Polkadot/Kusama node Operations opportunities


